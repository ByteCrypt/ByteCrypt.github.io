// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
)

const addSubscription = `-- name: AddSubscription :one
INSERT INTO subscriptions (
    email, name
) VALUES (
    $1, $2
)
RETURNING id, email, name
`

type AddSubscriptionParams struct {
	Email string
	Name  string
}

func (q *Queries) AddSubscription(ctx context.Context, arg AddSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, addSubscription, arg.Email, arg.Name)
	var i Subscription
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const deleteSubscriptionEmail = `-- name: DeleteSubscriptionEmail :exec
DELETE FROM subscriptions 
WHERE email = $1
`

func (q *Queries) DeleteSubscriptionEmail(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteSubscriptionEmail, email)
	return err
}

const deleteSubscriptionId = `-- name: DeleteSubscriptionId :exec
DELETE FROM subscriptions 
WHERE id = $1
`

func (q *Queries) DeleteSubscriptionId(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSubscriptionId, id)
	return err
}

const getSubscription = `-- name: GetSubscription :many
SELECT id, email, name FROM subscriptions
`

func (q *Queries) GetSubscription(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.Query(ctx, getSubscription)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(&i.ID, &i.Email, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscriptionEmail = `-- name: GetSubscriptionEmail :one
SELECT id, email, name FROM subscriptions
WHERE email = $1
`

func (q *Queries) GetSubscriptionEmail(ctx context.Context, email string) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscriptionEmail, email)
	var i Subscription
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const getSubscriptionId = `-- name: GetSubscriptionId :one
SELECT id, email, name FROM subscriptions
WHERE id = $1
`

func (q *Queries) GetSubscriptionId(ctx context.Context, id int64) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscriptionId, id)
	var i Subscription
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}
